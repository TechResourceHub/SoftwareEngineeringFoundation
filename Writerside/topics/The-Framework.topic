<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="The-Framework"
       title="The Framework"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

    <deflist>
        <def title="0. Read">
            <p>Read everything pertinent to the question / project at hand.</p>
            <p><i>Example:</i> Read the project prerequisites, man pages, documentation, books, and articles.</p>
            <p>► Try all the examples in the docs.</p>
        </def>
        <def title="1. Think">
            <p>Pause, take a breath, and think of the solution. Make sure you understand all of the required concepts
                and algorithms before you proceed to solve tasks.</p>
            <p>Once you have found your algorithm or solution - and only then - can you start to code.</p>
            <p>
                <b>Repeat:</b> DO NOT write any piece of code before you have the solution.
                Coding should only be translating your solution to computer code.
            </p>
            <p>To think of your solution, try to break things down; a big problem is easier to solve when you break it
                into smaller, easier problems.</p>
            <i>Example:</i>
            <p><b>First, rephrase the problem.</b> <i>“What am I trying to accomplish here?”</i></p>
            <p>
                <b>Then, go through different examples:</b> <i>“if I understand correctly, then with this
                input/context/parameters I should output/print/return/draw/… this”… “What could be the edge cases I have
                to think about to make sure my function/program will always work correctly and never crash?”</i>
            </p>
            <p>
                <b>Next, focus on the basic/regular use cases.</b> <i>“What should my algorithm be?”</i>
            </p>
            <p>
                When you find it, try to <code>“run”</code> it through different examples on a whiteboard or pen/paper
                and see if the input/output match your expectations.
            </p>
            <p>
                Finally, once you get that, try to see what changes you have to make to take care of all possible edge
                cases.
            </p>
            <p>
                ► Sometimes, you will be able to “guess” solutions or complete tasks without totally understanding all
                the concepts, especially if a task is very small. Do NOT do this, because if you do not develop your
                critical thinking skills with smaller learning opportunities you will not have the ability to solve
                harder questions. You need to start thinking like an engineer, and this is how to begin.
            </p>
            <p>
                ► Use a whiteboard or pen/paper until you are 100% sure your code will work; this maintains focus, and
                keeps your mind active.
            </p>
        </def>
        <def title="2. Think more + Whiteboard">
            <p>
                Write or draw out your problem on a whiteboard or paper. It’s easier to visualize your problem when it
                isn’t pure code.
            </p>
            <p>
                Can’t find the solution? Patiently think more, it’s out there. Also, ensure you read the resources
                thoroughly.
            </p>
        </def>
        <def title="3. Ask why?">
            <p>Whether or not your code runs when you input it, make sure you know why it doesn’t (or does) work without
                looking at the error message.
            </p>
            <p>You must also understand the vocabulary, concepts, and tools you use, and question why they exist so you
                ultimately know</p>
            <b>Example: Let’s imagine we’re doing the bit manipulation project.</b>
            <p>
                Why do you think this is important? Is it important? Why binary? Where do bits play a role? How is it
                connected to the machine, memory, bytes and values of types?
            </p>
            <p>If you haven’t asked and answered those questions, then you did the task wrong.</p>
            <p>
                Also, if someone comes to you with this question and you don’t have the answer, stop everything and work
                on answering this question right away.
            </p>
            <p>
                This is your future, so ensure you have a strong foundation of understanding.
            </p>
            <p>
                ► Never blindly work on tasks without first understanding why it is important to spend time on the topic
                of the day and how it plays a role in the system or comprehension of CS. Understanding the big picture
                is very important to your education and future career.
            </p>
        </def>
        <def title="4. Read the error messages">
            <p>Still can’t understand why it doesn’t work? Most of the time, the answer is in the error message.</p>
        </def>
        <def title="5. Google">
            <p>If you still can’t find the solution or understand why your code doesn’t work, google it <i>*error
                message, specific question, specific concept, etc.</i></p>

            <p>► NEVER TRUST THE INTERNET. A lot of the content on the Internet is wrong or incomplete. Always make sure
                what you are reading does make sense and is correct by challenging and testing every assumption.</p>

            <p>► You should only google something specific. This step is NOT about looking at how to do the project. It
                should only help answer a specific question or understand a concept.</p>

            <p>► You are NOT allowed to look at the solution / other people’s code. Even for “analysis”. Looking at
                other people’s code / a solution is considered cheating.</p>

            <p>► NEVER copy and paste something from the Internet. You need to understand everything before you
                implement something you read. Typing yourself - instead of cp/paste - ensures that you better understand
                and not miss any details.</p>

        </def>
        <def title="6. Google again">
            <p>If you can’t find it, then Google again using more context in your search or by rephrasing your
                question.</p>
        </def>
        <def title="7. Ask a peer">
            <p>If you are still stuck on a problem despite doing the steps above, don’t wait too long before asking to a
                peer.</p>

            <p>It is part of your job to ask for help. You are expected to do so, just like you will be expected to do
                so when you will have a job.</p>

            <b>Repeat: It’s your job to ask and it’s your job to help - especially at ALX SE.</b>

        </def>
        <def title="7.0 If you ask for help">

            <p>Respect the time of others.</p>

            <p>Make sure you spent enough time going through previous steps.</p>

            <p>Explain what the problem is and what you tried (i.e. how you followed The Framework). Give as much
                context as possible; this helps your peers help you, and will prepare you to be an effective software
                engineer.</p>

            <p>Poorly asked technical question</p>

            <code>"Hey, my code isn’t working. Can someone help me fix it?”</code>

            <p>This question is vague and doesn’t provide any context. It’s difficult for anyone to understand what the
                problem is or how to help.</p>

            <b>Well-asked technical question</b>
            <p>
                “I’m working on the bit manipulation project, and I’m trying to set the nth bit to 1 in a given number.
                Here’s the code I’ve written so far:
            </p>
            <code-block lang="c">
                unsigned int set_bit(unsigned int n, unsigned int index)
                {
                if (index > 31)
                return (0);

                return (n | (1 &lt;&lt; index));
                }
            </code-block>
            <p>
                However, I’m getting incorrect results when I run my tests. I’ve gone through the ALX framework and
                tried to solve the problem myself, but I’m stuck. Can someone help me understand what’s wrong with my
                code and how to fix it?”
            </p>
            <b>This question provides specific details about the problem, including the project name, the code the
                student has written, and the issue they’re facing. It also demonstrates that the student has gone
                through the ALX framework and attempted to solve the problem themselves before asking for help. This
                context makes it easier for someone to understand the problem and provide targeted assistance.</b>
            <p><b>7.1 If you are asked for help</b></p>
            <p>Respect every question; there is nothing more demotivating than having someone laughing at your question
                or being asked “what? you still don’t know that?”</p>

            <p>Do NOT touch others’ computers / keyboards. Explain, and let the person who asked for help type and
                correct their bugs/code.</p>

            <p>Do NOT give the final answer. You are here to guide, help them find the solution by themselves.</p>

            <p>Sometimes, you won’t be able to help, but you are still responsible to find someone who can. Stay with
                the person until it’s resolved. Bonus is that you will also learn how to solve the problem!</p>

            <p>Always start by confirming they went through the previous steps by asking “How did you follow The
                Framework?”. If you help someone without making sure of this, you are NOT helping them.</p>

            <p>When explaining something, always start with whiteboarding the algorithm. Again, coding should come at
                the end, only to translate the solution to code. When the student understands the solution, then clean
                the whiteboard, and ask the student to do it again on their own. They need to go step by step from zero
                to understanding to showcase that they deeply understand.</p>

            <b>Give hints</b>

            <p><b>Example of hints:</b> Try rephrasing the question: <i>“So what you are really looking for is…</i></p>

            <p>Point to the right documentation: <i>"You should read the manual of this command…"</i></p>

            <p>Again, coding should come at the end, only to translate the solution to code. When the student
                understands the solution, then clean the whiteboard, and ask the student to do it again on their own.
                Repeat until the student can do it.</p>

            <p>► It’s ok to code it in front of the student and explain the code, BUT then delete the file and ask the
                student to do it again on their own. Repeat until the student can do it.</p>

            <p>► There are no stupid questions!</p>
        </def>
        <def title="8. Ask more peers">
            <p>If those you’ve asked haven’t had the answer, ask someone else.</p>

            <p>99% of the time, someone knows and has the answer.</p>

            <b>Examples:</b>

            <p>Ask several students - from your cohort first, and then from previous cohorts. Ask specific, clear
                questions in your cohort Slack channel, topic specific channels, or reach out to students in other
                locations.</p>

            <p>► Different people will have different ways of explaining, since we all communicate differently. If at
                first you don’t understand, continue to ask others and don’t be discouraged.</p>

            <p>► Once you understand something on the whiteboard, wipe it and do it again on your own, since you only
                truly understand when you are able to do it on your own.</p>

        </def>
        <def title="9. Ask ChatGPT">
            <p>ChatGPT is a large language model trained by OpenAI, designed to engage in natural language conversations
                and provide intelligent responses. It can provide personalized explanations, feedback, and guidance on
                programming concepts, best practices, and common errors, as well as answering your questions and helping
                you troubleshoot issues in real-time.</p>

            <p>Before you use ChatGPT, you need to understand the context in which you are right now. You are here to
                learn. This is a very different context than when you will be working for a company. You need to focus
                on learning, while an employee needs to focus on shipping and be as effective and fast as possible doing
                so. As a result, the usage of AI has to be different in the two different contexts. Remember, you are
                here to LEARN, not to get green checks. Green checks are here to measure your learning. The check
                assumes that you are following the framework and that you are never cheating.</p>

            <p>In that context, here are some examples of what to ask ChatGPT (remember, only AFTER you have tried the
                above 8 steps):</p>

            <p>► <b>Explain concepts:</b> Ask ChatGPT to summarize concepts or explain them to you in a different way or
                in
                simpler terms. Try the following prompt for instance: “Explain C pointers to me like I am a 12 year
                old”</p>

            <p>► Ask additional, more detailed questions about concepts or examples. Try “Explain to me what is the
                difference between an address and a pointer in the C programming language”</p>

            <p>► <b>Find a bug:</b> You have been working on a task for hours, and nobody can help you. You can ask
                ChatGPT to
                help you find the bug, and get this final green check. This should be done in two phases.</p>

            <p><b>Phase 1:</b> Ask ChatGPT to explain to you why there is a bug, without giving you any code to fix it.
                Once you understand the reason, go back to your code and fix it yourself.</p>

            <p><b>Phase 2:</b> You have done Phase 1 and have spent at least 30 minutes on it. You can’t fix it. You can
                ask
                ChatGPT to help you with fixing the code. <b>BUT you should NEVER copy and paste any code that ChatGPT
                    has
                    produced. N.E.V.E.R. (you can do that in a different context, but not in the context of
                    learning)</b>.</p>

            <p>You want to take the time to read the explanation and understand the code. And then, you close the
                window, and you code it again on your own, without going back to ChatGPT. This is the ONLY way to know
                that you have actually understood: when you can do it on your own, without the help of anyone or
                anything.</p>

            <p>At the end of the project or task, when you get to 100%, we encourage you to ask ChatGPT if they see a
                way to improve your code. Try “I am a software engineering student and I had to create a function that
                {describe the function} This is my code {paste your code here>}. Do you see a way to improve it? If so,
                can you explain how and why?”</p>

        </def>
        <def title="10. Ask your Technical Mentors ™">
            <p>Each non-inaugural cohort has a dedicated Technical Mentor. TMs are to offer guidance in situations where
                your peers couldn’t assist you. They are here (in-person or on Slack) to help.</p>

            <p>Technical mentors will typically respond within 12 hours. This should be the last step in your path to
                unblock yourself.</p>

            <p>► Sometimes, you may not be able to meet with a TM in person; however, you are still expected to do your
                work. Use your cohort Slack channel to share your progress, ask questions, and help one another. TMs are
                in the cohort Slack channels and will help if necessary.</p>

        </def>
        <def title="General Tips:">
            <b>Always remember one thing: your goal is not to become great students. Your goal is to become great
                software engineers, because no one wants to hire students.</b>
        </def>
    </deflist>

</topic>