<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
		SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="0x12-Web-stack-debugging-2"
       title="0x12. Web stack debugging #2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

	<deflist>
		<def id="concepts" title="Concepts">
			<i>For this project, we expect one to look at this concept.</i>
			<list>
				<li>
					<a href="Web-stack-debugging.topic">
						<format color="DarkOrange">Web stack debugging</format>
					</a>
				</li>
			</list>
		</def>
	</deflist>

	<deflist>
		<def id="requirements" title="Requirements">
			<img alt="image_19.png" border-effect="rounded" src="image_19.png"/>
		</def>
		<def id="general" title="General">
			<list>
				<li>
					All your files will be interpolated on Ubuntu 20.04 LTS.
				</li>
				<li>
					All your files should end with a new line
				</li>
				<li>
					A <code>README.md</code> fle at the root of the folder of the project is mandatory.
				</li>
				<li>
					All your Bash script files must be executable
				</li>
				<li>
					Your Bash scripts must pass <code>Shellcheck</code> without any error
				</li>
				<li>
					Your Bash scripts must run without errors.
				</li>
				<li>
					The first line of all your bash scripts should be exactly:
					<code-block lang="shell">
						#!/usr/bin/env bash
					</code-block>
				</li>
				<li>
					The second line of all your Bash scripts should be a comment explaining what is the script doing
				</li>
			</list>
		</def>
	</deflist>

	<chapter id="tasks" title="Tasks">
		<procedure id="0_run_software_as_another_user" title="0. Run software as another user">
			<deflist>
				<def title="Run software as another user">
					<img alt="image_20.png" border-effect="rounded" src="image_20.png"/>
					<p>
						The user <code>root</code> is, on Linux, the “superuser”. It can do anything it wants, that’s
						a good and bad thing. A good practice is that one should never be logged in the
						<code>root</code> user, as if you fat finger a command and for example run <code>rm -rf
						/</code>, there is no comeback. That’s why it is preferable to run as a privileged user, meaning
						that the user also has the ability to perform tasks that the <code>root</code> user can do, just
						need to use a specific command that you need to discover.
					</p>
					<p>
						For the containers that you are given in this project as well as the checker, everything is run
						under the <code>root</code> user, which has the ability to run anything as another user.
					</p>
					<b>Requirement:</b>
					<list>
						<li>Write a Bash script that accepts one argument</li>
						<li>
							The script should run the <code>whoami</code> command under the user passed as an argument
						</li>
						<li>Make sure to try your script by passing different users</li>
					</list>
					<b>Example:</b>
					<code-block include-lines="1-7" lang="shell"
					            src="alx-system_engineering-devops/0x12-web_stack_debugging_2/console"/>
				</def>
			</deflist>

			<deflist collapsible="true">
				<def title="GitHub Repository:">
					<code-block lang="">
						alx-system_engineering-devops
					</code-block>
				</def>
				<def title="Directory:">
					<code-block lang="shell">
						0x12-web_stack_debugging_2
					</code-block>
				</def>
				<def title="File:">
					<code-block lang="shell">
						0-iamsomeoneelse
					</code-block>
				</def>
			</deflist>
		</procedure>

		<procedure id="1_run_nginx_as_nginx" title="1. Run Nginx as Nginx">
			<deflist>
				<def title="Run Nginx as Nginx">
					<p>
						The <code>root</code> user is a superuser that can do anything on a Unix machine, the top
						administrator. Security wise, you must do everything that you can to prevent an attacker from
						logging in as <code>root</code>. With this in mind, it’s a good practice not to run your web
						servers as <code>root</code> (which is the default for most configurations) and instead run the
						process as the less privileged <code>nginx</code> user instead. This way, if a hacker does find
						a security issue that allows them to break-in to your server, the impact is limited by the
						permissions of the <code>nginx</code> user.
					</p>
					<p>Fix this container so that Nginx is running as the <code>nginx</code> user.</p>
					<b>Requirements:</b>
					<list>
						<li><code>nginx</code> must be running as <code>nginx</code> user</li>
						<li><code>nginx</code> must be listening on all active IPs on port <code>8080</code></li>
						<li>You cannot use <code>apt-get remove</code></li>
						<li>Write a Bash script that configures the container to fit the above requirements</li>
					</list>
					<b>After debugging:</b>
					<code-block include-lines="9-18" lang="shell"
					            src="alx-system_engineering-devops/0x12-web_stack_debugging_2/console"/>
				</def>
			</deflist>

			<deflist collapsible="true">
				<def title="GitHub Repository:">
					<code-block lang="">
						alx-system_engineering-devops
					</code-block>
				</def>
				<def title="Directory:">
					<code-block lang="shell">
						0x12-web_stack_debugging_2
					</code-block>
				</def>
				<def title="File:">
					<code-block lang="shell">
						1-run_nginx_as_nginx
					</code-block>
				</def>
			</deflist>
		</procedure>

		<procedure id="2_7_lines_or_less" title="2. 7 lines or less">
			<deflist>
				<def title="7 lines or less">
					<p>Using what you did for task #1, make your fix short and sweet.</p>
					<b>Requirements:</b>
					<list>
						<li>Your Bash script must be 7 lines long or less</li>
						<li>There must be a new line at the end of the file</li>
						<li>You respect Bash script requirements</li>
						<li>You cannot use <code>;</code> <code>&amp;&amp;</code> <code>wget</code></li>
						<li>
							You cannot execute your previous answer file (Do not include the name of the previous script
							in this one)
						</li>
					</list>
				</def>
			</deflist>

			<deflist collapsible="true">
				<def title="GitHub Repository:">
					<code-block lang="">
						alx-system_engineering-devops
					</code-block>
				</def>
				<def title="Directory:">
					<code-block lang="shell">
						0x12-web_stack_debugging_2
					</code-block>
				</def>
				<def title="File:">
					<code-block lang="shell">
						100-fix_in_7_lines_or_less
					</code-block>
				</def>
			</deflist>

		</procedure>

	</chapter>
</topic>
