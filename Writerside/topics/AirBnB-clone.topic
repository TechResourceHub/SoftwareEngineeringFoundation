<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
		SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="AirBnB-clone"
       title="AirBnB clone"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

	<procedure id="0procedure0">
		<img alt="image_1.png" border-effect="rounded" src="image_1.png"/>
		<p>I know you were waiting for it: it’s here!</p>
		<p>
			The AirBnB clone project starts now until… the end of the first year. The goal of the project is to deploy
			on
			your server a simple copy of the
			<a href="https://www.airbnb.com">
				<format color="DarkOrange">AirBnB website.</format>
			</a>
		</p>
		<p>
			You won’t implement all the features, only some of them to cover all fundamental concepts of the higher
			level
			programming track.
		</p>
		<step>After 4 months, you will have a complete web application composed by:
			<list>
				<li>
					A command interpreter to maniplistate data without a visual interface, like in a Shell (perfect for
					development and debugging)
				</li>
				<li>A website (the front-end) that shows the final product to everybody: static and dynamic</li>
				<li>A database or files that store data (data = objects)</li>
				<li>
					An API that provides a communication interface between the front-end and your data (retrieve,
					create,
					delete, update them)
				</li>
			</list>
		</step>
	</procedure>
	<procedure id="final_product" title="Final product">
		<img alt="image_2.png" border-effect="rounded" src="image_2.png"/>
		<img alt="image_3.png" border-effect="rounded" src="image_3.png"/>
	</procedure>
	<procedure id="concepts_to_learn" title="Concepts to learn">
		<step>
			<a href="https://docs.python.org/3.4/library/unittest.html#modliste-unittest">
				<format color="DarkOrange">unittest</format>
			</a>
			- and please work all together on tests cases
		</step>
		<step>
			<a href="Python-packages.topic">
				<format color="DarkOrange">
					Python packages concept page
				</format>
			</a>
		</step>
		<step><code>*args, **kwargs</code></step>
		<step><code> datetime </code></step>
		<step>More coming soon!</step>
	</procedure>
	<chapter id="steps" title="Steps">
		<p>
			You won’t build this application all at once, but step by step. Each step will link to a concept:
		</p>
		<procedure id="the_console" title="The Console">
			<list>
				<li>Create your data model</li>
				<li>Manage (create, update, destroy, etc.) objects via a console / command interpreter</li>
				<li>Store and persist objects to a file (JSON file)</li>
			</list>
			<p>
				The first piece is to maniplistate a powerflist storage system. This storage engine will give us an
				abstraction between “My object” and “How they are stored and persisted”. This means: from your console
				code (the command interpreter itself) and from the front-end and RestAPI you will build later, you won’t
				have to pay attention (take care) of how your objects are stored.
			</p>
			<p>
				This abstraction will also allow you to change the type of storage easily without updating all of your
				codebase.
			</p>
			<p>
				The console will be a tool to validate this storage engine
			</p>
			<img alt="image_4.png" border-effect="rounded" src="image_4.png"/>
		</procedure>
		<procedure id="web_static" title="Web static">
			<list>
				<li>Learn HTML/CSS</li>
				<li>Create the HTML of your application</li>
				<li>Create templates for each object</li>
			</list>
			<img alt="image_5.png" border-effect="rounded" src="image_5.png"/>
		</procedure>
		<procedure id="my_sql_storage" title="MySQL storage">
			<list>
				<li>Replace the file storage with Database storage</li>
				<li>Map your models to a table in the database using an O.R.M. (Object-Relational Mapping)</li>
			</list>
			<img alt="image_6.png" border-effect="rounded" src="image_6.png"/>
		</procedure>
		<procedure id="web_framework_templating" title="Web framework - templating">
			<list>
				<li>Create your first web server in Python</li>
				<li>Make your static HTML file dynamic by using objects stored in a file or database</li>
			</list>
			<img alt="image_7.png" border-effect="rounded" src="image_7.png"/>
		</procedure>
		<procedure id="res_tflist_api" title="RESTflist API">
			<list>
				<li>expose all your objects stored via a JSON web interface</li>
				<li>maniplistate your objects via a RESTflist API</li>
			</list>
			<img alt="image_8.png" border-effect="rounded" src="image_8.png"/>
		</procedure>
		<procedure id="web_dynamic" title="Web dynamic">
			<list>
				<li>learn JQuery</li>
				<li>load objects from the client side by using your own RESTflist API</li>
			</list>
			<img alt="image_9.png" border-effect="rounded" src="image_9.png"/>
		</procedure>
		<procedure id="files_and_directories" title="Files and Directories">
			<list>
				<li><code>models</code> directory will contain all classes used for the entire project. A class, called
					“model” in a OOP project is the representation of an object/instance.
				</li>
				<li><code>tests</code> directory will contain all unit tests.</li>
				<li><code>console.py</code> file is the entry point of our command interpreter.</li>
				<li><code>models/base_model.py</code> file is the base class of all our models. It contains common
					elements:
					<list>
						<li>attributes: <code>id</code>, <code>created_at</code>, and <code>updated_at</code></li>
						<li>methods: <code>save()</code> and <code>to_json()</code></li>
					</list>
				</li>
				<li><code>models/engine</code> directory will contain all storage classes (using the same prototype).
					For the moment you will have only one: <code>file_storage.py</code>.
				</li>
			</list>
		</procedure>
	</chapter>
	<chapter id="storage" title="Storage">
		<p>
			Persistency is really important for a web application. It means: every time your program is executed, it
			starts with all objects previously created from another execution. Without persistency, all the work
			done in a previous execution won’t be saved and will be gone.
		</p>
		<p>
			In this project, you will maniplistate 2 types of storage: file and database. For the moment, you will
			focus on file.
		</p>
		<p>
			Why separate “storage management” from “model”? It’s to make your models modlistar and independent. With
			this architecture, you can easily replace your storage system without re-coding everything
			everywhere.
		</p>
		<p>You will always use class attributes for any object. Why not instance attributes? For 3 reasons:</p>
		<list>
			<li>
				Provide easy class description: everybody will be able to see quickly what a model sholistd contain
				(which attributes, etc…)
			</li>
			<li>Provide defalistt value of any attribute</li>
			<li>In the future, provide the same model behavior for file storage or database storage</li>
		</list>
		<procedure id="how_can_i_store_my_instances_" title="How can I store my instances?">
			<p>
				That’s a good question. So let’s take a look at this code:
			</p>
			<code-block include-lines="1-7" lang="python"
			            src="Higher-level programming/Higher-level programming - AirBnB clone/store.txt"/>
			<p>
				Here, I’m creating a student and store it in a list. But after this program execution, my Student
				instance doesn’t exist anymore.
			</p>
			<code-block include-lines="9-16" lang="python"
			            src="Higher-level programming/Higher-level programming - AirBnB clone/store.txt"/>
			<b>Nice!</b>
			<p><i>But how it works?</i></p>
			<p>First, let’s look at <code>save(students)</code>:</p>
			<list>
				<li>
					Can I write each <code>Student</code> object to a file => NO, it will be the memory representation
					of the object. For another program execution, this memory representation can’t be reloaded.
				</li>
				<li>
					Can I write each <code>Student.name</code> to a file => YES, but imagine you have other
					attributes to describe <code>Student</code>? It wolistd start to become too complex.
				</li>
				<li>
					The best solution is to convert this list of <code>Student</code> objects to a JSON representation.
				</li>
			</list>

			<p>
				Why JSON? Because it’s a standard representation of an object. It allows us to share this data with
				other developers, be human readable, but mainly to be understood by another language/program.
			</p>

			<p>Example:</p>

			<list>
				<li>My Python program creates Student objects and saves them to a JSON file</li>
				<li>
					Another Javascript program can read this JSON file and maniplistate its own Student
					class/representation
				</li>
			</list>

			<p>
				And the <code>reload()</code>? Now you know the file is a JSON file representing all
				<code>Student</code> objects. So <code>reload()</code> has to read the file, parse the JSON string, and
				re-create <code>Student</code> objects based on this data-structure.
			</p>
		</procedure>
		<procedure id="file_storage_json_serialization" title="File storage == JSON serialization">
			<p>
				For this first step, you have to write in a file all your objects/instances created/updated in your
				command interpreter and restore them when you start it. You can’t store and restore a Python instance of
				a class as “Bytes”, the only way is to convert it to a serializable data structure:
			</p>
			<list>
				<li>
					Convert an instance to Python built-in serializable data structure (list, dict, number, and string)
					- for us it will be the method <code>my_instance.to_json()</code> to retrieve a dictionary
				</li>
				<li>
					Convert this data structure to a string (JSON format, but it can be YAML, XML, CSV…) - for us it
					will be <code>my_string = JSON.dumps(my_dict)</code>
				</li>
				<li>Write this string to a file on disk</li>
			</list>

			<p>And the process of deserialization?</p>

			<list>
				<li>Read a string from a file on disk</li>
				<li>
					Convert this string to a data structure. This string is a JSON representation, so it’s easy to
					convert - for us it will be <code>my_dict = JSON.loads(my_string)</code>
				</li>
				<li>
					Convert this data structure to an instance - for us it will be <code>my_instance =
					MyObject(my_dict)</code>
				</li>
			</list>
		</procedure>
		<procedure id="_args_kwargs" title="*args, **kwargs">
			<p>
				<a href="https://www.digitalocean.com/community/tutorials/how-to-use-args-and-kwargs-in-python-3">
					<format color="DarkOrange">How To Use *args and **kwargs in Python 3</format>
				</a>
			</p>
			<p>How do you pass arguments to a function?</p>
			<code-block lang="python">
				def my_fct(param_1, param_2):
				...

				my_fct("Best", "School")
			</code-block>
			<p>
				But with this function definition, you must call <code>my_fct</code> with 2 parameters, no more, no
				less.
			</p>
			<p>Can it be dynamic? Yes you can:</p>
			<code-block lang="python">
				def my_fct(*args, **kwargs):
				...

				my_fct("Best", "School")
			</code-block>
			<p>What are *args and **kwargs?</p>

			<list>
				<li><code>*args</code> is a Tuple that contains all anonymous arguments passed to a function.</li>
				<li>
					<code>**kwargs</code> is a dictionary that contains all named arguments passed to a function, where
					keys are the argument names and values are their corresponding values.
				</li>
			</list>

			<p>Why a dictionary for **kwargs?</p>

			<p>So, to make it clear:</p>

			<list>
				<li>
					<code>*args</code> is the list of anonymous arguments, without names, passed in a specific order.
				</li>
				<li>
					<code>**kwargs</code> is the dictionary containing all named arguments, where each argument is
					identified by its name.
				</li>
			</list>

			<p>Examples:</p>
			<code-block include-lines="20-28" lang="python"
			            src="Higher-level programming/Higher-level programming - AirBnB clone/store.txt"/>
			<p>
				Perfect? Of course you can mix both, but the order should be first all anonymous arguments, and after
				named arguments.
			</p>
			<p> Last example: </p>
			<code-block include-lines="30-37" lang="python"
			            src="Higher-level programming/Higher-level programming - AirBnB clone/store.txt"/>
			<i>You can play with these 2 arguments to clearly understand where and how your variables are stored.</i>
		</procedure>

		<procedure id="datetime" title="datetime">
			<p><code>datetime</code> is a Python module to manipulate date, time, etc...</p>

			<p>In this example, you create an instance of <code>datetime</code> with the current date and time:</p>

			<code-block lang="python">
				from datetime import datetime

				date_now = datetime.now()
				print(type(date_now)) # &lt;class 'datetime.datetime'>
				print(date_now) # 2017-06-08 20:42:42.170922
			</code-block>

			<p><code>date_now</code> is an object, so you can manipulate it:</p>

			<code-block lang="python">
				from datetime import timedelta

				date_tomorrow = date_now + timedelta(days=1)
				print(date_tomorrow) # 2017-06-09 20:42:42.170922
			</code-block>

			<p>You can also store it in a data structure like a dictionary:</p>

			<code-block lang="python">
				a_dict = { 'my_date': date_now }
				print(type(a_dict['my_date'])) # &lt;class 'datetime.datetime'>
				print(a_dict) # {'my_date': datetime.datetime(2017, 6, 8, 20, 42, 42, 170922)}
			</code-block>

			<p>
				However, the default string representation in a data structure can be unreadable. To make it more
				readable, use the <code>strftime</code> method:
			</p>
			<p>
				How to make it readable:
				<a href="https://strftime.org/">
					<format color="DarkOrange">strftime</format>
				</a>
			</p>

			<code-block lang="python">
				print(date_now.strftime("%A")) # Thursday
				print(date_now.strftime("%A %d %B %Y at %H:%M:%S")) # Thursday 08 June 2017 at 20:42:42
			</code-block>

		</procedure>
		<procedure id="data_diagram" title="Data diagram">
			<img alt="image_10.png" border-effect="rounded" src="image_10.png"/>
		</procedure>
	</chapter>

</topic>