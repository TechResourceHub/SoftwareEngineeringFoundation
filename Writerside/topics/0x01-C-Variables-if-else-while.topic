<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
		SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="0x01-C-Variables-if-else-while"
       title="0x01. C - Variables, if, else, while"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

	<procedure id="concepts" title="Concepts">
		<step><a href="Using-Docker-WSL-on-your-local-host.topic"/></step>
	</procedure>

	<procedure id="resources" title="Resources">
		<tabs>
			<tab id="read" title="Read">
				<list>
					<li>
						<resource src="Everything you need to know to start with C.pdf">
							Everything you need to know to start with C.pdf
						</resource>
					</li>
					<li>
						<a href="https://publications.gbdirect.co.uk//c_book/chapter2/keywords_and_identifiers.html">
							Keywords and identifiers
						</a>
					</li>
					<li>
						<a href="https://publications.gbdirect.co.uk//c_book/chapter2/integral_types.html">
							integers
						</a>
					</li>
					<li>
						<a href="https://www.tutorialspoint.com/cprogramming/c_arithmetic_operators.htm">
							Arithmetic Operators in C
						</a>
					</li>
					<li>
						<a href="https://www.cprogramming.com/tutorial/c/lesson2.html">If statements in C</a>
					</li>
					<li>
						<a href="https://www.tutorialspoint.com/cprogramming/if_else_statement_in_c.htm">
							C - The if-else Statement
						</a>
					</li>
					<li>
						<a href="https://www.tutorialspoint.com/cprogramming/c_relational_operators.htm">
							Relational Operators in C
						</a>
					</li>
					<li>
						<a href="https://www.fresh2refresh.com/c-programming/c-operators-expressions/c-logical-operators/">
							Logical operators
						</a>
					</li>
					<li>
						<a href="https://www.tutorialspoint.com/cprogramming/c_while_loop.htm">
							C - While Loop
						</a>
					</li>
				</list>
			</tab>
			<tab id="watch" title="Watch">
				<video src="https://www.youtube.com/watch?v=Ju1LYO9pkaI"/>
				<video src="https://www.youtube.com/watch?v=LM6IjCbtpZA"/>
			</tab>
			<tab id="man-or-help" title="man or help">
				<code-block lang="shell">
					1. ascii
					# You do not need to learn about:
					2. scanf
					3. getc
					4. getchar
					5. EOF
					6. EXIT_SUCCESS
					7. time
					8. rand
					9. srand
					10. RAND_MAX
					11. for loops
					12. do...while loops
					13. functions
				</code-block>
			</tab>
		</tabs>
	</procedure>

	<procedure id="learning-objectives" title="Learning Objectives">
		<include element-id="learning-objective-p" from="Introduction-to-mindsets-Grit-and-growth-mindsets.topic"/>
		<p><b>General</b></p>
		<list>
			<li>What are the arithmetic operators and how to use them</li>
			<li>What are the logical operators (sometimes called boolean operators) and how to use them</li>
			<li>What the the relational operators and how to use them</li>
			<li>What values are considered TRUE and FALSE in C</li>
			<li>What are the boolean operators and how to use them</li>
			<li>How to use the <code>if, if ... else</code> statements</li>
			<li>How to use comments</li>
			<li>How to declare variables of types <code>char, int, unsigned int</code></li>
			<li>How to assign values to variables</li>
			<li>How to print the values of variables of type <code>char, int, unsigned int, using printf</code></li>
			<li>How to use the <code>while</code> loop</li>
			<li>How to use variables with the <code>while</code> loop</li>
			<li>How to print variables using <code>printf</code></li>
			<li>What are the purpose of the <code>gcc</code> flags <code>-m32</code> and <code>-m64</code></li>
		</list>
	</procedure>

	<include element-id="requirements" from="0x00-C-Hello-World.topic"/>

	<chapter id="tasks" title="Tasks">

		<procedure collapsible="true"
		           default-state="collapsed" id="0_positive_anything_is_better_than_negative_nothing"
		           title="0. Positive anything is better than negative nothing" type="choices">
			<p>
				This program will assign a random number to the variable n each time it is executed. Complete the source
				code in order to print whether the number stored in the variable n is positive or negative.
			</p>
			<step>
				Source Code
				<code-block lang="c"
				            src="alx-low_level_programming/0x01-variables_if_else_while/0-positive_or_negative_c.c"/>
			</step>
			<step>The variable <code>n</code> will store a different value every time you will run this program</step>
			<step>
				You don’t have to understand what <code>rand</code>, <code>srand</code>, <code>RAND_MAX</code> do.
				Please do not touch this code
			</step>
			<step> The output of the program should be:</step>
			<step>
				The number, followed by
				<list>
					<li>If the number is greater than 0: <code>is positive</code></li>
					<li>If the number is 0: <code>is zero</code></li>
					<li>If the number is less than 0: <code>is negative</code></li>
				</list>
				followed by a new line
			</step>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 0-positive_or_negative.c -o
				0-positive_or_negative
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				-520693284 is negative
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				-973398895 is negative
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				-199220452 is negative
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				561319348 is positive
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				561319348 is positive
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				266853958 is positive
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				-48147767 is negative
				julien@ubuntu:~/0x01$ ./0-positive_or_negative
				0 is zero
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="1_the_last_digit" title="1. The last digit"
		           type="choices">
			<p>
				This program will assign a random number to the variable <code>n</code> each time it is executed.
				Complete the source code in order to print the last digit of the number stored in the variable
				<code>n</code>.
			</p>
			<step>
				Source Code
				<code-block lang="c" src="alx-low_level_programming/0x01-variables_if_else_while/1-last_digit_c.c"/>
			</step>
			<step> The variable <code>n</code> will store a different value every time you run this program</step>
			<step>
				You don’t have to understand what <code>rand</code>, <code>srand</code>, <code>RAND_MAX</code> do.
				Please do not touch this code
			</step>
			<step>
				The output of the program should be:
				<list>
					<li> The string <code>Last digit of</code> ,followed by</li>
					<li><code>n</code> ,followed by</li>
					<li> the string <code>is</code> ,followed by
						<list>
							<li>
								If the last digit of <code>n</code> is greater than: the string <code>and is greater
								than 5</code>
							</li>
							<li>If the last digit of <code>n</code> is 0: <code>and is 0</code></li>
							<li>
								If the last digit of <code>n</code> is less than 6 and not 0: the string <code>and is
								less than 6 and not 0</code>
							</li>
						</list>
						followed by a new line
					</li>
				</list>
			</step>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 1-last_digit.c -o 1-last_digit
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 629438752 is 2 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of -748255693 is -3 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of -1052791662 is -2 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of -284805734 is -4 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of -284805734 is -4 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 491506926 is 6 and is greater than 5
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 954249937 is 7 and is greater than 5
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 652334952 is 2 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of -729688197 is -7 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of -729688197 is -7 and is less than 6 and not 0
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 45528266 is 6 and is greater than 5
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 45528266 is 6 and is greater than 5
				julien@ubuntu:~/0x01$ ./1-last_digit
				Last digit of 809065140 is 0 and is 0
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed"
		           id="2_i_sometimes_suffer_from_insomnia_and_when_i_can_t_fall_asleep_i_play_what_i_call_the_alphabet_game"
		           title="2. I sometimes suffer from insomnia. And when I can't fall asleep, I play what I call the alphabet game"
		           type="choices">

			<p>Write a program that prints the alphabet in lowercase, followed by a new line.</p>
			<list>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf</code>,
					<code>puts</code>,
					etc..) is forbidden
				</li>
				<li>All your code should be in the <code>main</code> function</li>
				<li>You can only use <code>putchar</code> twice in your code</li>
			</list>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 2-print_alphabet.c -o
				2-print_alphabet
				julien@ubuntu:~/0x01$ ./2-print_alphabet
				abcdefghijklmnopqrstuvwxyz
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="3_alph_abet" title="3. alphABET" type="choices">
			<p>Write a program that prints the alphabet in lowercase, and then in uppercase, followed by a new line.</p>
			<list>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf</code>,
					<code>puts</code>,
					etc..) is forbidden
				</li>
				<li>All your code should be in the <code>main</code> function</li>
				<li>You can only use <code>putchar</code> three times in your code</li>
			</list>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 3-print_alphabets.c -o
				3-print_alphabets
				julien@ubuntu:~/0x01$ ./3-print_alphabets | cat -e
				abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed"
		           id="4_when_i_was_having_that_alphabet_soup_i_never_thought_that_it_would_pay_off"
		           title="4. When I was having that alphabet soup, I never thought that it would pay off"
		           type="choices">
			<p>Write a program that prints the alphabet in lowercase, followed by a new line.</p>
			<list>
				<li>Print all the letters except <code>q</code> and <code>e</code></li>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf</code>,
					<code>puts</code>,
					etc..) is forbidden
				</li>
				<li>All your code should be in the <code>main</code> function</li>
				<li>You can only use <code>putchar</code> twice in your code</li>
			</list>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 4-print_alphabet.c -o
				4-print_alphabet
				julien@ubuntu:~/0x01$ ./4-print_alphabt
				abcdfghijklmnoprstuvwxyz
				julien@ubuntu:~/0x01$ ./4-print_alphabet | grep [eq]
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="5_numbers" title="5. Numbers" type="choices">
			<p>
				Write a program that prints all single digit numbers of base 10 from <code>0</code>, followed by a new
				line.
			</p>
			<step>All your code should be in the <code>main</code> function</step>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 5-print_numbers.c -o
				5-print_numbers
				julien@ubuntu:~/0x01$ ./5-print_numbers
				0123456789
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="6_numberz" title="6. Numberz" type="choices">
			<p>
				Write a program that prints all single digit numbers of base 10 starting from <code>0</code>, followed
				by a new line.
			</p>
			<step>You are not allowed to use any variable of type <code>char</code></step>
			<step>
				You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
				etc…) is forbidden)
			</step>
			<step>You can only use <code>putchar</code> twice in your code</step>
			<step>All your code should be in the <code>main</code> function</step>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 6-print_numberz.c -o
				6-print_numberz
				julien@ubuntu:~/0x01$ ./6-print_numberz
				0123456789
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="7_smile_in_the_mirror"
		           title="7. Smile in the mirror" type="choices">
			<p>Write a program that prints the lowercase alphabet in reverse, followed by a new line</p>
			<step>
				You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
				etc…) is forbidden)
			</step>
			<step>All your code should be in the <code>main</code> function</step>
			<step>You can only use <code>putchar</code> twice in your code</step>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 7-print_tebahpla.c -o
				7-print_tebahpla
				julien@ubuntu:~/0x01$ ./7-print_tebahpla
				zyxwvutsrqponmlkjihgfedcba
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="8_hexadecimal" title="8. Hexadecimal"
		           type="choices">
			<p>
				Write a program that prints all the numbers of base 16 in lowercase, followed by a new line
			</p>
			<step>
				You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
				etc…) is forbidden)
			</step>
			<step>All your code should be in the <code>main</code> function</step>
			<step>You can only use <code>putchar</code> three times in your code</step>
			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 8-print_base16.c -o 8-print_base16
				julien@ubuntu:~/0x01$ ./8-print_base16
				0123456789abcdef
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed"
		           id="9_patience_persistence_and_perspiration_make_an_unbeatable_combination_for_success" title="9. Patience, persistence and perspiration make an unbeatable combination for success
">
			<p>Write a program that prints all possible combinations of single-digit numbers</p>
			<list>
				<li>Numbers must be separated <code>,</code>, followed by a space</li>
				<li>Numbers should be printed in ascending order</li>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
					etc…) is forbidden)
				</li>
				<li>All your code should be in the <code>main</code> function</li>
				<li>You can only use <code>putchar</code> four times maximum in your code</li>
				<li>You are not allowed to use any variable of type <code>char</code></li>
			</list>

			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 9-print_comb.c -o 9-print_comb
				julien@ubuntu:~/0x01$ ./9-print_comb | cat -e
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9$
				julien@ubuntu:~/0x01$
			</code-block>

		</procedure>

		<procedure collapsible="true" default-state="collapsed"
		           id="10_inventing_is_a_combination_of_brains_and_materials_the_more_brains_you_use_the_less_material_you_need"
		           title="10. Inventing is a combination of brains and materials. The more brains you use, the less material you need">
			<p>Write a program that prints all possible different combinations of two digits</p>
			<list>
				<li>Numbers must be separated <code>,</code>, followed by a space</li>
				<li>The two digits must be different</li>
				<li>
					<code>01</code> and <code>10</code> are considered the same combination of the digits <code>0</code>
					and <code>1</code>
				</li>
				<li>Print only the smallest combination of the two digits</li>
				<li>Numbers should be printed in ascending order, with two digits</li>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
					etc…) is forbidden)
				</li>
				<li>You can only use <code>putchar</code> five times maximum in your code</li>
				<li>You are not allowed to use any variable of type <code>char</code></li>
				<li>All your code should be in the <code>main</code> function</li>
			</list>

			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 100-print_comb3.c -o
				100-print_comb3
				julien@ubuntu:~/0x01$ ./100-print_comb3
				01, 02, 03, 04, 05, 06, 07, 08, 09, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 34, 35,
				36, 37, 38, 39, 45, 46, 47, 48, 49, 56, 57, 58, 59, 67, 68, 69, 78, 79, 89
				julien@ubuntu:~/0x01$
			</code-block>

		</procedure>

		<procedure collapsible="true" default-state="collapsed"
		           id="11_the_success_combination_in_business_is_do_what_you_do_better_and_do_more_of_what_you_do_"
		           title="11. The success combination in business is: Do what you do better... and: do more of what you do...">
			<p>Write a program that prints all possible different combinations of three digits</p>
			<list>
				<li>Numbers must be separated <code>,</code>, followed by a space</li>
				<li>The three digits must be different</li>
				<li>
					<code>012, 120, 102, 021, 201, 210</code> are considered the same combination of three digits <code>0,
					1, 2</code>
				</li>
				<li>Print only the smallest combination of the three digits</li>
				<li>Numbers should be printed in ascending order, with three digits</li>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
					etc…) is forbidden)
				</li>
				<li>You can only use <code>putchar</code> six times maximum in your code</li>
				<li>You are not allowed to use any variable of type <code>char</code></li>
				<li>All your code should be in the <code>main</code> function</li>
			</list>

			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 101-print_comb4.c -o
				101-print_comb4
				julien@ubuntu:~/0x01$ ./101-print_comb4
				012, 013, 014, 015, 016, 017, 018, 019, 023, 024, 025, 026, 027, 028, 029, 034, 035, 036, 037, 038, 039,
				045, 046, 047, 048, 049, 056, 057, 058, 059, 067, 068, 069, 078, 079, 089, 123, 124, 125, 126, 127, 128,
				129, 134, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 156, 157, 158, 159, 167, 168, 169, 178, 179,
				189, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 256, 257, 258, 259, 267, 268, 269, 278, 279,
				289, 345, 346, 347, 348, 349, 356, 357, 358, 359, 367, 368, 369, 378, 379, 389, 456, 457, 458, 459, 467,
				468, 469, 478, 479, 489, 567, 568, 569, 578, 579, 589, 678, 679, 689, 789
				julien@ubuntu:~/0x01$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="12_software_is_eating_the_world"
		           title="12. Software is eating the World">
			<p>Write a program that prints all possible combinations of two-two-digit numbers.</p>
			<list>
				<li>The numbers should range form <code>0 to 99</code></li>
				<li>The two numbers should be separated by a space</li>
				<li>
					All numbers should be printed with two digits. <code>1</code> should be printed as <code>01</code>
				</li>
				<li>The combination of numbers must be separated by comma, followed by a space</li>
				<li>The combinations of numbers should be printed in ascending order</li>
				<li>
					<code>00 01</code> and <code>01 00</code> are considered the same combination of the numbers <code>0
					and 1</code>
				</li>
				<li>
					You can only use the <code>putchar</code> function (every other function (<code>printf, puts,</code>
					etc…) is forbidden)
				</li>
				<li>You can only use <code>putchar</code> eight times maximum in your code</li>
				<li>You are not allowed to use any variable of type <code>char</code></li>
				<li>All your code should be in the <code>main</code> function</li>
			</list>

			<code-block lang="shell">
				julien@ubuntu:~/0x01$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 102-print_comb5.c -o
				102-print_comb5
				julien@ubuntu:~/0x01$ ./102-print_comb5
				00 01, 00 02, 00 03, 00 04, 00 05, 00 06, 00 07, 00 08, 00 09, 00 10, 00 11, [...] 40 91, 40 92, 40 93,
				40 94, 40 95, 40 96, 40 97, 40 98, 40 99, 41 42, 41 43, 41 44, 41 45, 41 46, 41 47, 41 48, 41 49, 41 50,
				41 51, 41 52, 41 53 [...] 93 95, 93 96, 93 97, 93 98, 93 99, 94 95, 94 96, 94 97, 94 98, 94 99, 95 96,
				95 97, 95 98, 95 99, 96 97, 96 98, 96 99, 97 98, 97 99, 98 99
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="repository" title="Repository">
			<p><b>GitHub repository:</b> <code>alx-low_level_programming</code></p>
			<p><b>Directory:</b> <code>0x01-variables_if_else_while</code></p>
			<p><b>File:</b>
				<code>0-positive_or_negative.c</code>
				<code>1-last_digit.c</code>
				<code>2-print_alphabet.c</code>
				<code>3-print_alphabets.c</code>
				<code>4-print_alphabet.c</code>
				<code>5-print_numbers.c</code>
				<code>6-print_numberz.c</code>
				<code>7-print_tebahpla.c-</code>
				<code>8-print_base16.c-</code>
				<code>9-print_comb.c</code>
				<code>100-print_comb3.c</code>
				<code>101-print_comb4.c</code>
				<code>102-print_comb5.c</code>
			</p>
		</procedure>

	</chapter>

</topic>