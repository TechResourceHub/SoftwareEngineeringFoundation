<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="0x03-C-Debugging"
       title="0x03. C - Debugging"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

    <deflist>
        <def title="Resources">
            <tabs>
                <tab title="Read">
                    <list>
                        <li>
                            <a href="https://en.wikipedia.org/wiki/Debugging">
                                Debugging
                            </a>
                        </li>
                        <li>
                            <a href="https://www.thoughtfulcode.com/rubber-duck-debugging-psychology/">
                                Rubber Duck Debugging: The Psychology of How it Works
                            </a>
                        </li>
                    </list>
                </tab>
            </tabs>
            <p>
                Debugging is the process of finding and fixing errors in software that prevents it from running
                correctly. As you become a more advanced programmer and an industry engineer, you will learn how to use
                debugging tools such as <code>gdb</code> or built-in tools that IDEs have. However, it’s important to
                understand the concepts and processes of debugging manually.
            </p>
            <img alt="image_119.png" border-effect="rounded" src="image_119.png"/>
        </def>
        <def title="Learning Objectives">
            <p id="learning-objective-p">
                At the end of this project, you are expected to be able to
                <a href="https://fs.blog/feynman-learning-technique/">explain to anyone</a>, <b>without the help of
                Google</b>
            </p>
        </def>
        <def title="General">
            <list>
                <li>What is debugging</li>
                <li>What are some methods of debugging manually</li>
                <li>How to read the error messages</li>
            </list>
        </def>
        <def title="Copyright - Plagiarism">
            <list>
                <li>
                    You are tasked to come up with solutions for the tasks below yourself to meet with the above
                    learning objectives.
                </li>
                <li>
                    You will not be able to meet the objectives of this or any following project by copying and pasting
                    someone else’s work.
                </li>
                <li>You are not allowed to publish any content of this project.</li>
                <li>
                    Any form of plagiarism is strictly forbidden and will result in removal from the program.
                </li>
            </list>
        </def>
        <def title="Requirements">
            <list>
                <li>
                    Allowed editors: <code>vi, vim, emacs</code>
                </li>
                <li>
                    All your files will be compiled on Ubuntu 20.04 LTS using gcc, using the options <code>-Wall -Werror
                    -Wextra -pedantic -std=gnu89</code>
                </li>
                <li>All your files should end with a new line</li>
                <li>
                    Your code should use the Betty style. It will be checked using <code>betty-style.pl and
                    betty-doc.pl</code>
                </li>
                <li>
                    A <code>README.md</code> file at the root of the repo, containing a description of the repository
                </li>
                <li>
                    A README.md file, at the root of the folder of this project (i.e. <code>0x03-debugging</code>),
                    describing what this project is about
                </li>
            </list>
        </def>
    </deflist>

    <procedure id="tasks" title="Tasks">
        <deflist>
            <def title="0. Multiple mains">
                <p>
                    In most projects, we often give you only one main file to test with. For example, this main file is
                    a test for a <code>postitive_or_negative()</code> function similar to the one you worked with in an
                    <a href="0x01-C-Variables-if-else-while.topic">earlier C project: (task 0)</a>
                </p>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/main.c"/>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/main.h"/>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/console"/>

                <p>
                    Based on <code>main.c</code> file above, create a file named <code>0-main.c</code>. This file must
                    test that the function <code>positive_or_negative()</code> give the correct output when given a case
                    of <code>0</code>
                </p>
                <p>
                    You are not coding the solution of function, you are just testing it! However, you can adapt your
                    function from
                    <a href="0x01-C-Variables-if-else-while.topic">
                        0x01-C-Variables, if, else, while - Task #0
                    </a>
                    to compile with this main file to test locally
                </p>
                <list>
                    <li>
                        You need to upload <code>0-main.c</code> and <code>main.h</code> for this task. We eill provide
                        our own <code>positive_or_negative()</code> function
                    </li>
                    <li>
                        You are not allowed to add or remove lines of code, you may change only one line in this task
                    </li>
                </list>
                <code-block lang="shell" src="alx-low_level_programming/0x03-C-Debugging/task0"/>
                <deflist collapsible="true">
                    <def title="Repo:">
                        <list>
                            <li>
                                <p><b>GitHub repository:</b> <code>alx-low_level_programming</code></p>
                            </li>
                            <li>
                                <p><b>Directory:</b> <code>0x03-debugging</code></p>
                            </li>
                            <li>
                                <p><b>File:</b> <code>0-main.c</code>, <code>main.h</code></p>
                            </li>
                        </list>
                    </def>
                </deflist>
            </def>
            <def title="1. Like, comment, subscribe">
                <p>
                    Copy this <a anchor="1-main.c">main file.</a> Comment out (don't delete it!) the part of the code
                    that is causing the output to go into an infinite loop.
                </p>
                <list>
                    <li>
                        Don't add or remove any lines of code, as we will be checking your line count. You are only
                        allowed to comment out existing code
                    </li>
                    <li>
                        You donot have to compile with <code>-Wall -Werror - Wextra -pedantic</code> for this task
                    </li>
                </list>
                <code-block id="1-main.c" lang="c" src="alx-low_level_programming/0x03-C-Debugging/1-main.c"/>
                <p>Your output should look like this:</p>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/task1"/>
                <deflist collapsible="true">
                    <def title="Repo:">
                        <list>
                            <li>
                                <p><b>GitHub repository:</b> <code>alx-low_level_programming</code></p>
                            </li>
                            <li>
                                <p><b>Directory:</b> <code>0x03-debugging</code></p>
                            </li>
                            <li>
                                <p><b>File:</b> <code>1-main.c</code></p>
                            </li>
                        </list>
                    </def>
                </deflist>
            </def>
            <def title="2. 0 > 972?">
                <p>This program prints the largest of three integers</p>
                <code>2-main.c</code>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/2-main.c"/>
                <code>2-largest_number.c</code>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/2-largest_number.c"/>
                <code-block lang="c" src="alx-low_level_programming/0x03-C-Debugging/task2"/>
                <p>? That is definitely not right</p>
                <p>
                    Fix the code <code>2-largest_number</code> so that it correctly prints out the largest of the three
                    numbers, no matter the case
                </p>
                <list>
                    <li>
                        Line count will not be checked for this task
                    </li>
                </list>
                <deflist collapsible="true">
                    <def title="Repo:">
                        <list>
                            <li>
                                <p><b>GitHub repository:</b> <code>alx-low_level_programming</code></p>
                            </li>
                            <li>
                                <p><b>Directory:</b> <code>0x03-debugging</code></p>
                            </li>
                            <li>
                                <p><b>File:</b> <code>2-largest_number</code>, <code>main.h</code></p>
                            </li>
                        </list>
                    </def>
                </deflist>
            </def>
            <def title="3. Leap year">
                
            </def>
        </deflist>
    </procedure>

</topic>