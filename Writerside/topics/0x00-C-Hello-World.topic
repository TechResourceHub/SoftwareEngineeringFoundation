<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
		SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="0x00-C-Hello-World"
       title="0x00. C - Hello, World"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

	<procedure id="concepts" title="Concepts">
		<step><a href="Using-Docker-WSL-on-your-local-host.topic"/></step>
		<step>
			<resource src="Everything you need to know to start with C.pdf">
				Everything you need to know to start with C.pdf
			</resource>
		</step>
	</procedure>

	<procedure id="resources" title="Resources">
		<tabs>
			<tab id="read" title="Read">
				<list type="decimal">
					<li>
						<resource src="Everything you need to know to start with C.pdf">
							Everything you need to know to start with C.pdf
						</resource>
					</li>
					<li>
						<a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis Ritchie</a>
					</li>
					<li>
						<a href="https://github.com/alx-tools/Betty/wiki">Betty Coding Style</a>
					</li>
					<li>
						<a href="https://x.com/unix_byte/status/1024147947393495040?s=21">Hash-bang under the hood</a>
					</li>
					<li>
						<a href="http://harmful.cat-v.org/software/c++/linus">Linus Torvalds on C vs. C++</a>
					</li>
				</list>
			</tab>
			<tab id="watch" title="Watch">
				<video src="https://www.youtube.com/watch?v=co0b0xLEuRM"/>
				<video src="https://www.youtube.com/watch?v=de2Hsvxaf8M"/>
				<video src="https://www.youtube.com/watch?v=smGalmxPVYc"/>
				<video src="https://www.youtube.com/watch?v=rk2fK2IIiiQ"/>
				<video src="https://www.youtube.com/watch?v=FwpP_MsZWnU"/>
				<video src="https://www.youtube.com/watch?v=VDslRumKvRA"/>
			</tab>
			<tab id="man-or-help" title="man or help">
				<code-block lang="shell">
					1. gcc
					2. printf (3)
					3. puts
					4. putchar
				</code-block>
			</tab>
		</tabs>
	</procedure>

	<procedure id="learning-objectives" title="Learning Objectives">
		<include element-id="learning-objective-p" from="Introduction-to-mindsets-Grit-and-growth-mindsets.topic"/>
		<p><b>General</b></p>
		<list>
			<li>Why C programming is awesome</li>
			<li>Who invented C</li>
			<li>Who are Dennis Ritchie, Brian Kernighan and Linus Torvalds</li>
			<li>What happens when you type <code>gcc main.c</code></li>
			<li>What is an entry point</li>
			<li>What is <code>main</code></li>
			<li>How to print text using <code>printf, puts, putchar</code></li>
			<li>How to get the size of a specific type using the unary operator <code>sizeof</code></li>
			<li>How to compile using <code>gcc</code></li>
			<li>What is the default program name when compiling with <code>gcc</code></li>
			<li>What is the official C coding style and how to check your code with <code>betty-style</code></li>
			<li>How to find the right header to include in your source code when using a standard library function</li>
			<li>How does the <code>main</code> function influence the return value of the program</li>
		</list>
	</procedure>

	<procedure id="requirements" title="Requirements">
		<p><b>C</b></p>
		<list>
			<li>Allowed editors: <code>vi, vim, emacs</code></li>
			<li>
				All your files will be compiled on Ubuntu 20.04 LTS using gcc, using the options <code>-Wall -Werror
				-Wextra -pedantic -std=gnu89</code>
			</li>
			<li>All your files should end with a new line</li>
			<li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li>
			<li>
				A <code>README.md</code> file, at the root of the folder of this project, containing a description of
				the project
			</li>
			<li>There should be no errors and no warnings during compilation</li>
			<li>You are not allowed to use <code>system</code></li>
			<li>
				Your code should use the Betty style. It will be checked using
				<a href="https://github.com/alx-tools/Betty/blob/master/betty-style.pl">betty-style.pl</a> and
				<a href="https://github.com/alx-tools/Betty/blob/master/betty-doc.pl">betty-doc.pl</a>
			</li>
		</list>
		<p><b>Shell Scripts</b></p>
		<list>
			<li>Allowed editors: <code>vi, vim, emacs</code></li>
			<li>All your scripts will be tested on Ubuntu 20.04 LTS</li>
			<li>All your scripts should be exactly two lines long (<code>$ wc -l file should print 2</code>)</li>
			<li>All your files should end with a new line</li>
			<li>The first line of all your files should be exactly <code>#!/bin/bash</code></li>
		</list>
		<p><b>Betty Linter</b></p>
		<p>To run the Betty linter just with command <code>betty [filename]</code></p>
		<list>
			<li>Go to <a href="https://github.com/alx-tools/Betty">Betty Repository</a></li>
			<li>Clone the <a href="https://github.com/alx-tools/Betty">repo</a> to your local machine</li>
			<li><code>cd</code> to the Betty directory</li>
			<li>Install the linter with <code>sudo ./install.sh</code></li>
			<li><code>emacs or vi</code> a new file called <code>betty</code>, and copy the script below:</li>
			<li>
				<code-block lang="shell" src="betty"/>
			</li>
			<li>
				Once saved, exit file and change permissions to apply to all users with <code>chmod a+x betty</code>
			</li>
			<li>
				Move the <code>betty</code> file into <code>/bin/</code> directory or somewhere else in your
				<code>$PATH</code> with <code>sudo mv betty /bin/</code>
			</li>
		</list>
		<p>You can now type <code>betty [filename]</code> to run the Betty linter!</p>
	</procedure>

	<chapter id="tasks" title="Tasks">

		<procedure collapsible="true" default-state="collapsed" id="source-codes" title="Source Code">
			<b>main.c</b>
			<code-block lang="c" src="alx-low_level_programming/0x00-hello_world/main.c"/>
			<b>gcc options</b>
			<code-block lang="shell" src="gcc"/>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="0-preprocessor" title="0. Preprocessor">
			<p>Write a script that runs a C file through the preprocessor and save the result into another file.</p>
			<list>
				<li>The C file name will be saved in the variable <code>$CFILE</code></li>
				<li>The output should be saved in the file <code>c</code></li>
			</list>

			<code-block lang="c">

				julien@ubuntu:~/c/0x00$ cat main.c
				#include &lt;stdio.h&gt;

				/**
				* main - Entry point
				*
				* Return: Always 0 (Success)
				*/
				int main(void)
				{
				return (0);
				}
				julien@ubuntu:~/c/0x00$ export CFILE=main.c
				julien@ubuntu:~/c/0x00$ ./0-preprocessor
				julien@ubuntu:~/c/0x00$ tail c
				# 942 "/usr/include/stdio.h" 3 4

				# 2 "main.c" 2


				# 3 "main.c"
				int main(void)
				{
				return (0);
				}
				julien@ubuntu:~/c/0x00$

			</code-block>

		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="1_compiler" title="1. Compiler">
			<p>Write a script that compiles a C file but does not link.</p>
			<list>
				<li>The C file name will be saved in the variable <code>$CFILE</code></li>
				<li>
					The output file should be named the same as the C file, but with the extension <code>.o</code>
					instead of <code>.c</code>
					<list>
						<li>
							Example: if the C file is <code>main.c</code>, the output file should be <code>main.o</code>
						</li>
					</list>
				</li>
			</list>
			<code-block lang="c">

				julien@ubuntu:~/c/0x00$ export CFILE=main.c
				julien@ubuntu:~/c/0x00$ cat main.c
				#include &lt;stdio.h&gt;

				/**
				* main - Entry point
				*
				* Return: Always 0 (Success)
				*/
				int main(void)
				{
				return (0);
				}
				julien@ubuntu:~/c/0x00$ ./1-compiler
				julien@ubuntu:~/c/0x00$ ls
				0-preprocessor 1-compiler c main.o
				Makefile 100-intel main.c main.s
				julien@ubuntu:~/c/0x00$ cat -v main.o | head
				^?ELF^B^A^A^@^@^@^@^@^@^@^@^@^A^@>^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^P^B^@^@^@^@^@^@^@^@^@^@@^@^@^@^@^@@^@^K^@^H^@UHM-^IM-eM-8^@^@^@^@]M-C^@GCC:
				(Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0
				20160609^@^T^@^@^@^@^@^@^@^AzR^@^Ax^P^A^[^L^G^HM-^P^A^@^@^\^@^@^@^\^@^@^@^@^@^@^@^K^@^@^@^@A^N^PM-^F^BC^M^FF^L^G^H^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^D^@M-qM-^?^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^C^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^C^@^B^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^C^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^C^@^E^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^C^@^F^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^C^@^D^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^H^@^@^@^R^@^A^@^@^@^@^@^@^@^@^@^K^@^@^@^@^@^@^@^@main.c^@main^@^@^@^@
				^@^@^@^@^@^@^@^B^@^@^@^B^@^@^@^@^@^@^@^@^@^@^@^@.symtab^@.strtab^@.shstrtab^@.text^@.data^@.bss^@.comment^@.note.GNU-stack^@.rela.eh_frame^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^[^@^@^@^A^@^@^@^F^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@@^@^@^@^@^@^@^@^K^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@!^@^@^@^A^@^@^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@K^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@'^@^@^@^H^@^@^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@K^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@,^@^@^@^A^@^@^@0^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@K^@^@^@^@^@^@^@5^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@5^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@M-^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@J^@^@^@^A^@^@^@^B^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@M-^@^@^@^@^@^@^@^@8^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^H^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@E^@^@^@^D^@^@^@@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@M-
				^A^@^@^@^@^@^@^X^@^@^@^@^@^@^@
				^@^@^@^F^@^@^@^H^@^@^@^@^@^@^@^X^@^@^@^@^@^@^@^Q^@^@^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@M-8^A^@^@^@^@^@^@T^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^B^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@M-8^@^@^@^@^@^@^@M-X^@^@^@^@^@^@^@
				^@^@^@^H^@^@^@^H^@^@^@^@^@^@^@^X^@^@^@^@^@^@^@
				^@^@^@^C^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@M-^P^A^@^@^@^@^@^@^M^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^A^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@julien@ubuntu:~/c/0x00$

			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="2_assembler" title="2. Assembler">
			<p> Write a script that generates the assembly code of a C code and save it in an output file.</p>
			<list>
				<li>The C file name will be saved in the variable <code>$CFILE</code></li>
				<li>
					The output file should be named the same as the C file, but with the extension <code>.s</code>
					instead of <code>.c</code>
					<list>
						<li>
							Example: if the C file is <code>main.c</code>, the output file should be <code>main.s</code>
						</li>
					</list>
				</li>
			</list>

			<code-block lang="c">
				julien@ubuntu:~/c/0x00$ export CFILE=main.c
				julien@ubuntu:~/c/0x00$ cat main.c
				#include &lt;stdio.h&gt;

				/**
				* main - Entry point
				*
				* Return: Always 0 (Success)
				*/
				int main(void)
				{
				return (0);
				}
				julien@ubuntu:~/c/0x00$ ./2-assembler
				julien@ubuntu:~/c/0x00$ ls
				0-preprocessor 1-compiler 2-assembler c main.c main.s Makefile
				julien@ubuntu:~/c/0x00$ cat main.s
				.file "main.c"
				.text
				.globl main
				.type main, @function
				main:
				.LFB0:
				.cfi_startproc
				pushq %rbp
				.cfi_def_cfa_offset 16
				.cfi_offset 6, -16
				movq %rsp, %rbp
				.cfi_def_cfa_register 6
				movl $0, %eax
				popq %rbp
				.cfi_def_cfa 7, 8
				ret
				.cfi_endproc
				.LFE0:
				.size main, .-main
				.ident "GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609"
				.section .note.GNU-stack,"",@progbits
				julien@ubuntu:~/c/0x00$
			</code-block>

		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="3_name" title="3. Name">
			<p>Write a script that compiles a C file and creates an executable named <code>cisfun</code>.</p>
			<step> The C file name will be saved in the variable <code>$CFILE</code></step>

			<code-block lang="c">
				julien@ubuntu:~/c/0x00$ export CFILE=main.c
				julien@ubuntu:~/c/0x00$ cat main.c
				#include &lt;stdio.h&gt;

				/**
				* main - Entry point
				*
				* Return: Always 0 (Success)
				*/
				int main(void)
				{
				return (0);
				}
				julien@ubuntu:~/c/0x00$ ./3-name
				julien@ubuntu:~/c/0x00$ ls
				0-preprocessor 1-compiler 3-name cisfun main.o Makefile
				100-intel 2-assembler c main.c main.s
				julien@ubuntu:~/c/0x00$
			</code-block>

		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="4_hello_puts" title="4. Hello, puts" type="choices">
			<p>
				Write a C program that prints exactly <code>"Programming is like building a multilingual puzzle</code>,
				followed by a new line.
			</p>
			<step>Use the function <code>puts</code></step>
			<step>You are not allowed to use <code>printf</code></step>
			<step>Your program should end with the value <code>0</code></step>

			<code-block lang="shell">
				julien@ubuntu:~/c/0x00$ gcc -Wall -Werror -Wextra -pedantic -std=gnu89 4-puts.c &amp;&amp; ./a.out
				"Programming is like building a multilingual puzzle
				julien@ubuntu:~/c/0x00$ echo $?
				0
				julien@ubuntu:~/c/0x00$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="5_hello_printf" title="5. Hello, printf">
			<p>
				Write a C program that prints exactly <code>with proper grammar, but the outcome is a piece of
				art,</code>, followed by a new line.
			</p>
			<list>
				<li>Use the function <code>printf</code></li>
				<li>You are not allowed to use the function <code>puts</code></li>
				<li>Your program should return <code>0</code></li>
				<li>Your program should compile without warning when using the <code>-Wall gcc</code> option</li>
			</list>

			<code-block lang="shell">
				julien@ubuntu:~/c/0x00$ gcc -Wall -Werror -Wextra -pedantic -std=gnu89 5-printf.c
				julien@ubuntu:~/c/0x00$ ./a.out
				with proper grammar, but the outcome is a piece of art,
				julien@ubuntu:~/c/0x00$ echo $?
				0
				julien@ubuntu:~/c/0x00$
			</code-block>
		</procedure>

		<procedure collapsible="true"
		           default-state="collapsed" id="6_size_is_not_grandeur_and_territory_does_not_make_a_nation"
		           title="6. Size is not grandeur, and territory does not make a nation">
			<p>Write a C program that prints the size of various types on the computer it is compiled and run on</p>
			<list>
				<li>You should produce the same output as in the example</li>
				<li>Warnings are not allowed</li>
				<li>Your program should return <code>0</code></li>
				<li>
					You might have to install the package <code>libc6-dev-i386</code> on your Linux to test the <code>-m32
					gcc</code> option
				</li>
			</list>

			<code-block lang="shell">
				julien@ubuntu:~/c/0x00$ gcc 6-size.c -m32 -o size32 2> /tmp/32
				julien@ubuntu:~/c/0x00$ gcc 6-size.c -m64 -o size64 2> /tmp/64
				julien@ubuntu:~/c/0x00$ ./size32
				Size of a char: 1 byte(s)
				Size of an int: 4 byte(s)
				Size of a long int: 4 byte(s)
				Size of a long long int: 8 byte(s)
				Size of a float: 4 byte(s)
				julien@ubuntu:~/c/0x00$ ./size64
				Size of a char: 1 byte(s)
				Size of an int: 4 byte(s)
				Size of a long int: 8 byte(s)
				Size of a long long int: 8 byte(s)
				Size of a float: 4 byte(s)
				julien@ubuntu:~/c/0x00$ echo $?
				0
				julien@ubuntu:~/c/0x00$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="7_intel" title="7. Intel" type="choices">
			<p>
				Write a script that generates the assembly code (intel syntax) of a C code and save it in an output
				file
			</p>
			<step>The C file name will be saved in the variable <code>$CFILE</code></step>
			<step>
				The output file should be named the same as the C file, but with the extension <code>.s</code> instead
				of <code>.c</code>
				<list>
					<li>Example: if the file is <code>main.c</code>, the ouput file should be <code>main.s</code></li>
				</list>
			</step>
			<code-block lang="c">
				julien@ubuntu:~/c/0x00$ export CFILE=main.c
				julien@ubuntu:~/c/0x00$ cat main.c
				#include &lt;stdio.h&gt;

				/**
				* main - Entry point
				*
				* Return: Always 0 (Success)
				*/
				int main(void)
				{
				return (0);
				}
				julien@ubuntu:~/c/0x00$ ./100-intel
				julien@ubuntu:~/c/0x00$ cat main.s
				.file "main.c"
				.intel_syntax noprefix
				.text
				.globl main
				.type main, @function
				main:
				.LFB0:
				.cfi_startproc
				push rbp
				.cfi_def_cfa_offset 16
				.cfi_offset 6, -16
				mov rbp, rsp
				.cfi_def_cfa_register 6
				mov eax, 0
				pop rbp
				.cfi_def_cfa 7, 8
				ret
				.cfi_endproc
				.LFE0:
				.size main, .-main
				.ident "GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609"
				.section .note.GNU-stack,"",@progbits
				julien@ubuntu:~/c/0x00$
			</code-block>
		</procedure>

		<procedure
				collapsible="true" default-state="collapsed"
				id="8_unix_is_basically_a_simple_operating_system_but_you_have_to_be_a_genius_to_understand_the_simplicity"
				title="8. UNIX is basically a simple operating system, but you have to be a genius to understand the simplicity"
				type="choices">

			<p>
				Write a C program that prints exactly <code>and that piece of art is useful" - Dora Korpar,
				2015-10-19</code>, followed by a new line, to the standard error.
			</p>

			<step>
				You are not allowed to use any functions listed in the NAME section of the <code>man</code> (3) <code>printf</code>
				or <code>man</code> (3) <code>puts</code>
			</step>
			<step>Your program should return 1</step>
			<step>Your program should compile without any warnings when using the <code>-Wall gcc</code> option</step>

			<code-block lang="shell">
				julien@ubuntu:~/c/0x00$ gcc -Wall -Werror -Wextra -pedantic -std=gnu89 -o quote 101-quote.c
				julien@ubuntu:~/c/0x00$ ./quote
				and that piece of art is useful" - Dora Korpar, 2015-10-19
				julien@ubuntu:~/c/0x00$ echo $?
				1
				julien@ubuntu:~/c/0x00$ ./quote 2> q
				julien@ubuntu:~/c/0x00$ cat q
				and that piece of art is useful" - Dora Korpar, 2015-10-19
				julien@ubuntu:~/c/0x00$ grep printf &lt; 101-quote.c
				julien@ubuntu:~/c/0x00$ grep put &lt; 101-quote.c
				julien@ubuntu:~/c/0x00$
			</code-block>
		</procedure>

		<procedure collapsible="true" default-state="collapsed" id="repository" title="Repository">
			<p><b>GitHub repository:</b> <code>alx-low_level_programming</code></p>
			<p><b>Directory:</b> <code>0x00-hello_world</code></p>
			<p><b>File:</b>
				<code>0-preprocessor</code>
				<code>1-compiler</code>
				<code>2-assembler</code>
				<code>3-name</code>
				<code>4-puts.c</code>
				<code>5-printf.c</code>
				<code>6-size.c</code>
				<code>100-intel</code>
				<code>101-quote.c</code></p>
		</procedure>

	</chapter>
</topic>