<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
		SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="0x0A-Configuration-management"
       title="0x0A. Configuration management"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

	<chapter id="background_context" title="Background Context">
		<procedure id="background_context01">
			<p>
				When I was working for SlideShare, I worked on an auto-remediation tool called Skynet that monitored,
				scaled and fixed Cloud infrastructure. I was using a parallel job-execution system called MCollective
				that allowed me to execute commands to one or multiple servers at the same time. I could apply an action
				to a selected set of servers by applying a filter such as the server’s hostname or any other metadata we
				had (server type, server environment…). At some point, a bug was present in my code that sent nil to the
				filter method.
			</p>
			<p>There were 2 pieces of bad news:</p>
			<step>
				When MCollective receives nil as an argument for its filter method, it takes this to mean ‘all
				servers’
			</step>
			<step>The action I sent was to terminate the selected servers</step>
			<p>
				I started the parallel job-execution and after some time, I realized that it was taking longer than
				expected. Looking at logs I realized that I was shutting down SlideShare’s entire document conversion
				environment. Actually, 75% of all our conversion infrastructure servers had been shut down, resulting in
				users not able to convert their PDFs, powerpoints, and videos… Pretty bad!
			</p>
			<p>
				Thanks to Puppet, we were able to restore our infrastructure to normal operation in under 1H, pretty
				impressive. Imagine if we had to do everything manually: launching the servers, configuring and linking
				them, importing application code, starting every process, and obviously, fixing all the bugs (you should
				know by now that complicated infrastructure always goes sideways)…
			</p>
			<p>
				Obviously writing Puppet code for your infrastructure requires an investment of time and energy, but in
				the long term, it is for sure a must-have.
			</p>
			<img alt="image.png" border-effect="rounded" src="image.png"/>
			<a href="https://x.com/devopsreact/status/836971570136375296">
				<format color="DarkOrange">^_^</format>
			</a>
		</procedure>

		<procedure id="resources" title="Resources">
			<tabs>
				<tab id="read" title="Read">
					<list>
						<li>
							<a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-configuration-management">
								<format color="DarkOrange">
									An Introduction to Configuration Management
								</format>
							</a>
						</li>
						<li>
							<a href="https://www.puppet.com/docs/puppet/5.5/types/file.html">
								<format color="DarkOrange">
									Puppet resource type: file (check “Resource types” for all manifest types in the
									left
									menu)
								</format>
							</a>
						</li>
						<li>
							<a href="https://www.puppet.com/blog">
								<format color="DarkOrange">
									Puppet’s Declarative Language: Modeling Instead of Scripting
								</format>
							</a>
						</li>
						<li>
							<a href="http://puppet-lint.com/">
								<format color="DarkOrange">
									Puppet lint
								</format>
							</a>
						</li>
						<li>
							<a href="https://github.com/voxpupuli/puppet-mode">
								<format color="DarkOrange">
									Puppet emacs mode
								</format>
							</a>
						</li>
					</list>
				</tab>
			</tabs>
		</procedure>
	</chapter>
	<chapter id="requirements" title="Requirements">
		<procedure id="general" title="General">
			<list>
				<li>
					All your files will be interpreted on Ubuntu 20.04 LTS
				</li>
				<li>
					All your files should end with a new line
				</li>
				<li>
					A <code>README.md</code> file at the root of the folder of the project is mandatory
				</li>
				<li>
					Your Puppet manifests must pass <code>puppet-lint</code> version 2.1.1 without any errors
				</li>
				<li>
					Your Puppet manifests must run without error
				</li>
				<li>
					Your Puppet manifests first line must be a comment explaining what the Puppet manifest is about
				</li>
				<li>
					Your Puppet manifests files must end with the extension <code>.pp</code>
				</li>
			</list>
		</procedure>
		<deflist>
			<def id="note-on-versioning" title="Note on Versioning">
				<p>Your Ubuntu 20.04 VM should have Puppet 5.5 preinstalled.</p>
			</def>
		</deflist>
		<deflist>
			<def id="install-puppet" title="Install puppet">
				<code-block lang="shell">
					$ apt-get install -y ruby=1:2.7+1 --allow-downgrades
					$ apt-get install -y ruby-augeas
					$ apt-get install -y ruby-shadow
					$ apt-get install -y puppet
				</code-block>
				<p>
					You do not need to attempt to upgrade versions. This project is simply a set of tasks to familiarize
					you with the basic level syntax which is virtually identical in newer versions of Puppet.
				</p>
				<a href="https://www.puppet.com/docs/puppet/8/puppet_index.html">
					<format color="DarkOrange">
						Puppet 8 Docs
					</format>
				</a>
			</def>
			<def id="install-puppet-lint" title="Install puppet-lint">
				<code-block lang="shell">
					$ gem install puppet-lint
				</code-block>
			</def>
		</deflist>
	</chapter>

	<chapter id="tasks" title="Tasks">
		<procedure id="0_create_a_file" title="0. Create a file">
			<p>Using Puppet, create a file in <code>/tmp</code></p>
			<step>
				<b>Requirements</b>
				<list>
					<li>File path is <code>/tmp/school</code></li>
					<li>File permission is <code>0744</code></li>
					<li>File owner is <code>www-data</code></li>
					<li>File contains <code>I love Puppet</code></li>
				</list>
			</step>
			<deflist>
				<def title="Example:">
					<code-block lang="shell">
						root@6712bef7a528:~# puppet-lint --version
						puppet-lint 2.5.2
						root@6712bef7a528:~# puppet-lint 0-create_a_file.pp
						root@6712bef7a528:~#
						root@6712bef7a528:~# puppet apply 0-create_a_file.pp
						Notice: Compiled catalog for 6712bef7a528.ec2.internal in environment production in 0.04 seconds
						Notice: /Stage[main]/Main/File[school]/ensure: defined content as
						'{md5}f1b70c2a42a98d82224986a612400db9'
						Notice: Finished catalog run in 0.03 seconds
						root@6712bef7a528:~#
						root@6712bef7a528:~# ls -l /tmp/school
						-rwxr--r-- 1 www-data www-data 13 Mar 19 23:12 /tmp/school
						root@6712bef7a528:~# cat /tmp/school
						I love Puppetroot@6712bef7a528:~#
					</code-block>
				</def>
			</deflist>

			<deflist collapsible="true">
				<def title="GitHub repository:">
					<code-block lang="shell">
						alx-system_engineering-devops
					</code-block>
				</def>
				<def title="Directory:">
					<code-block lang="shell">
						0x0A-configuration_management
					</code-block>
				</def>
				<def title="File:">
					<code-block lang="shell">
						0-create_a_file.pp
					</code-block>
				</def>
			</deflist>
		</procedure>

		<procedure id="1_install_a_package" title="1. Install a package">
			<p>Using Puppet, install <code>flask</code> from <code>pip3</code>.</p>
			<step>
				<b>Requirements:</b>
				<list>
					<li>Install <code>flask</code></li>
					<li>Version must be <code>2.1.0</code></li>
				</list>
			</step>
			<deflist>
				<def title="Example:">
					<code-block lang="shell">
						root@9665f0a47391:/# puppet apply 1-install_a_package.pp
						Notice: Compiled catalog for 9665f0a47391 in environment production in 0.14 seconds
						Notice: /Stage[main]/Main/Package[Flask]/ensure: created
						Notice: Applied catalog in 0.20 seconds
						root@9665f0a47391:/# flask --version
						Python 3.8.10
						Flask 2.1.0
						Werkzeug 2.1.1
					</code-block>
				</def>
			</deflist>

			<deflist collapsible="true">
				<def title="GitHub repository:">
					<code-block lang="shell">
						alx-system_engineering-devops
					</code-block>
				</def>
				<def title="Directory:">
					<code-block lang="shell">
						0x0A-configuration_management
					</code-block>
				</def>
				<def title="File:">
					<code-block lang="shell">
						1-install_a_package.pp
					</code-block>
				</def>
			</deflist>
		</procedure>

		<procedure id="2_execute_a_command" title="2. Execute a command">
			<p>Using Puppet, create a manifest that kills a process named <code>killmenow.</code></p>
			<step>
				<b>Requirements:</b>
				<list>
					<li>Must use the <code>exec</code> Puppet resource</li>
					<li>Must use <code>pkill</code></li>
				</list>
			</step>
			<deflist>
				<def title="Terminal #0 - starting my process:">
					<code-block lang="shell">
						root@d391259bf577:/# cat killmenow
						#!/bin/bash
						while [[ true ]]
						do
						sleep 2
						done

						root@d391259bf577:/# ./killmenow
					</code-block>
				</def>
				<def title="Terminal #1 - executing my manifest">
					<code-block lang="shell">
						root@d391259bf577:/# puppet apply 2-execute_a_command.pp
						Notice: Compiled catalog for d391259bf577.hsd1.ca.comcast.net in environment production in 0.01
						seconds
						Notice: /Stage[main]/Main/Exec[killmenow]/returns: executed successfully
						Notice: Finished catalog run in 0.10 seconds
						root@d391259bf577:/#
					</code-block>
				</def>
				<def title="Terminal #0 - process has been terminated">
					<code-block lang="">
						root@d391259bf577:/# ./killmenow
						Terminated
						root@d391259bf577:/#
					</code-block>
				</def>
			</deflist>

			<deflist collapsible="true">
				<def title="GitHub repository:">
					<code-block lang="shell">
						alx-system_engineering-devops
					</code-block>
				</def>
				<def title="Directory:">
					<code-block lang="shell">
						0x0A-configuration_management
					</code-block>
				</def>
				<def title="File:">
					<code-block lang="shell">
						2-execute_a_command.pp
					</code-block>
				</def>
			</deflist>
		</procedure>
	</chapter>

</topic>